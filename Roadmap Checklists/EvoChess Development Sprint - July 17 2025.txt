# EvoChess Development Sprint Checklist
**Date: July 17th, 2025**
**Focus: Fix Core Gameplay Mechanics**

## SPRINT GOAL
Fix the most critical broken features to make EvoChess fully playable and enjoyable.

---

## üö® IMMEDIATE PRIORITY - Game-Breaking Issues

### 1. Splitter Mechanics Fix
**Status**: [x] COMPLETED - July 18th, 2025
**Priority**: Critical
**Estimated Time**: ‚úÖ Complete
**Description**: Splitter pieces can now both move forward AND split into two pieces

**ROOT CAUSE IDENTIFIED**: Split logic is correctly implemented in server code, but blocked by restrictive balance requirements:
- 3-turn cooldown between splits
- 2 evolution points required per split
- Max 3 splitters per player limit

**SOLUTION IMPLEMENTED**: 
- Reduced cooldown from 3 turns to 1 turn between splits
- Reduced cost from 2 evolution points to 1 evolution point
- Increased limit from 3 to 5 splitters per player

**‚úÖ COMPLETED ON JULY 17TH**:
- Evolution dialog system now working properly
- Players can choose to evolve pawns to splitters
- Splitters successfully split into two pieces!
- Split mechanics working as intended

**‚úÖ COMPLETED ON JULY 18TH**:
- Fixed splitter movement limitation
- Removed code that was skipping regular moves when split moves existed
- Added move choice dialog for positions with multiple options
- Yellow ring highlights show positions where you can choose between move/split

**Tasks**:
- [x] Start EvoChess server and test current Splitter behavior
- [x] Analyze existing Splitter implementation in codebase - FOUND: Logic exists in handlePieceSplit()
- [x] Identify where splitting logic should be implemented - FOUND: Already implemented correctly
- [x] **FIX APPLIED**: Adjusted checkSplitterBalance() function to be less restrictive
- [x] **SOLUTION**: Reduced cooldown to 1 turn, reduced cost to 1 evolution point, increased splitter limit
- [x] Updated applySplitCosts() function to reflect new balance requirements
- [x] Test split functionality with adjusted balance requirements - ‚úÖ WORKING!
- [x] Verify split pieces behave correctly in battles
- [x] **NEW**: Fix splitters to have both regular movement AND split options - ‚úÖ COMPLETED

**Testing Checklist**:
- [x] Splitter piece can be selected and moved
- [x] Moving splitter creates two pieces instead of one - ‚úÖ CONFIRMED WORKING
- [x] Both split pieces are properly tracked in game state
- [x] Split pieces can move independently
- [x] Split pieces can participate in battles
- [x] Visual feedback shows split action clearly
- [x] Splitters can move forward like pawns (not just split) - ‚úÖ COMPLETED

---

### 2. Pawn Capture Logic Fix
**Status**: [x] COMPLETED - WORKING CORRECTLY ‚úÖ
**Priority**: Critical
**Estimated Time**: 1-2 hours
**Description**: Pawns cannot capture properly, breaking basic chess gameplay

**‚úÖ CONFIRMED WORKING**: In-game testing reveals pawn capture logic is **fully functional**:
- ‚úÖ Pawn successfully captured opponent pawn diagonally
- ‚úÖ Battle system worked correctly: "Battle completed! Winner: MK7-08Bz6RXdTsKXAAAL-pawn-1, Loser: sBanXLMf-2c6aQ4PAAAN-pawn-4, Kills: 1"
- ‚úÖ Evolution triggered properly: "Evolution! PAWN ‚Üí SPLITTER at position (8, 0)"
- ‚úÖ Attack directions calculated correctly based on spawn location

**üîç REAL ISSUE DISCOVERED**: Evolution synchronization bug - after capture and evolution, client userData.piece not updated to reflect new piece type, causing confusion about piece capabilities

**EVIDENCE FROM LOGS**:
- Server correctly evolved piece: `Evolution! PAWN ‚Üí SPLITTER`
- Client still shows old type: `"type":"PAWN"` in userData
- Server generates moves for SPLITTER (sideways movement)
- Player sees PAWN symbol but gets SPLITTER movement options

**REDIRECT TO**: Evolution System Synchronization Fix (Task #4)

**Tasks**:
- [x] Analyze current pawn capture implementation - ‚úÖ CONFIRMED WORKING
- [x] Test pawn capture in running game - ‚úÖ SUCCESSFUL CAPTURE
- [x] Verify battle system provides proper feedback - ‚úÖ WORKING
- [x] **DISCOVERED**: Evolution synchronization bug is the real issue

**Testing Checklist**:
- [ ] Pawns can select diagonal capture moves
- [ ] Pawn capture moves are highlighted correctly
- [ ] Battle system triggers when pawn captures
- [ ] Captured pieces are removed properly
- [ ] Pawn capture works near poles and equator

---

### 3. Battle Feedback System
**Status**: [ ] Not Started
**Priority**: High
**Estimated Time**: 2-3 hours
**Description**: Players have no idea what's happening during battles

**Tasks**:
- [ ] Add battle dice roll visualization
- [ ] Create battle feedback UI showing calculations
- [ ] Add delay explanation during battles
- [ ] Show battle outcome with clear winner indication
- [ ] Add battle statistics display
- [ ] Create battle log/history feature

**Testing Checklist**:
- [ ] Battle UI appears when pieces engage
- [ ] Dice roll animation shows clearly
- [ ] Battle calculations are visible to players
- [ ] Battle outcome is clearly indicated
- [ ] Battle delays are explained to players
- [ ] Battle statistics update correctly

---

## üîß HIGH PRIORITY - Core Features

### 4. Camera Mode Auto-Switching Bug Fix
**Status**: [ ] Not Started  
**Priority**: HIGH - Major UX Issue
**Estimated Time**: 1-2 hours
**Description**: Clicking on pieces automatically switches to camera mode and requires 3-4 tries before pieces move

**ROOT CAUSE IDENTIFIED**: Mouse event handling conflict between OrbitControls and piece selection:
1. **Event Timing Issue**: `pointerdown` events check for pieces under mouse but OrbitControls processes events differently
2. **Controls Disabling Logic**: `controls.enabled = false` when clicking on pieces, but re-enabling logic in `pointerup` is inconsistent
3. **Mode State Confusion**: Manual selectionMode (S key) vs automatic temporary selection mode create conflicts
4. **Mouse State Management**: `isClickingOnPiece` variable and mouse timing logic are causing race conditions

**SOLUTION APPROACH**:
1. Fix the event order: Ensure piece selection logic runs before OrbitControls
2. Clean up mode switching logic to prevent auto-switching to camera mode
3. Improve mouse state management and timing
4. Better separation between manual mode switching (S key) and temporary piece interaction

**Tasks**:
- [ ] **Fix Event Order**: Modify event listener priorities to prevent OrbitControls from intercepting piece clicks
- [ ] **Clean Up Auto-Switching**: Remove or fix logic that automatically switches to camera mode when clicking pieces
- [ ] **Improve Mode State**: Separate manual mode switching from temporary interaction states
- [ ] **Mouse State Debug**: Fix mouse state management to prevent multiple click requirements
- [ ] **Test Click Response**: Ensure pieces respond on first click consistently
- [ ] **Test S Key Toggle**: Verify manual mode switching still works correctly

**Testing Checklist**:
- [ ] Pieces respond to first click consistently
- [ ] No automatic camera mode switching when clicking pieces
- [ ] S key manual mode toggle works correctly
- [ ] Camera controls work properly when not clicking pieces
- [ ] No mouse state confusion or timing issues

---

### 5. Per-Piece Evolution System Overhaul
**Status**: [x] MANUAL CHOICE SYSTEM COMPLETED - Per-piece redesign pending
**Priority**: HIGH - Major System Redesign
**Estimated Time**: 4-6 hours
**Description**: Complete redesign of evolution system from player-based bank to per-piece individual evolution points

**‚úÖ COMPLETED ON JULY 17TH**:
- **Fixed**: Evolution synchronization issue has been resolved!
- **Fixed**: Client-side piece data now updates when server evolution occurs
- **Fixed**: Visual mesh now recreates with correct evolved piece type  
- **Fixed**: Click detection userData now properly reflects evolved piece type
- **Fixed**: Automatic evolution removed - now uses manual choice dialog
- **Implemented**: Evolution choice dialog with timer and UI
- **Implemented**: Players can choose to evolve OR bank points
- **Fixed**: Dialog button click handlers (socket scope issue)
- **Result**: Evolution system fully functional with player choice!

**‚è≥ STILL PENDING**: Complete system redesign for per-piece evolution points

**DESIGN CHANGE**: User clarified that evolution points should be **per-piece**, not per-player:
- Each piece starts with base evolution points for its type
- Pieces gain evolution points by capturing other pieces
- Each piece evolves individually using its own accumulated points
- Visual indicators show each piece's evolution points
- Right-click menu shows evolution tree for each piece

**Major Components**:
- [ ] **Backend**: Redesign evolution point tracking from player bank to per-piece storage
- [ ] **Frontend**: Add floating point value display above each piece  
- [ ] **UI**: Implement right-click evolution menu per piece
- [ ] **Visualization**: Create interactive evolution tree showing current position and available paths
- [ ] **Capture Logic**: Transfer evolution points from captured piece to capturing piece
- [ ] **Visual Feedback**: Greyed out/translucent options for unaffordable evolutions

**Implementation Tasks**:
- [ ] Analyze current centralized evolution system in evolutionManager.js
- [ ] Redesign piece data structure to include individual evolution points
- [ ] Update capture logic to transfer points between pieces
- [ ] Create floating point display system in Three.js
- [ ] Implement right-click context menu for pieces
- [ ] Design evolution tree visualization UI
- [ ] Update evolution logic to work per-piece instead of per-player
- [ ] Add visual indicators for affordable vs unaffordable evolutions

**Testing Checklist**:
- [ ] Each piece displays its evolution points above it
- [ ] Right-clicking piece shows evolution menu
- [ ] Evolution tree shows current piece position accurately
- [ ] Capturing a piece transfers its evolution points to the capturer
- [ ] Pieces can evolve independently using their own points
- [ ] Unaffordable evolutions are clearly greyed out
- [ ] Evolution menu updates in real-time as points change

---

### 4.5 Evolution Game Restart Bug Fix
**Status**: [ ] IN PROGRESS - Still experiencing issues
**Priority**: CRITICAL
**Estimated Time**: 2-3 hours
**Description**: Game was restarting when evolving pawn to splitter

**ROOT CAUSE IDENTIFIED**: VictoryManager was incorrectly declaring victory during evolution:
- Victory checks run every 5 seconds via periodic interval
- Race condition during evolution caused false victory declaration
- Victory check would see inconsistent player piece counts

**ATTEMPTED FIXES**:
- Enhanced victory condition validation to check actual piece existence
- Added pause mechanism for victory checks during evolution
- Increased game start timer from 10 to 30 seconds to prevent false victories
- Added detailed logging to track victory check states
- Victory checks now resume after evolution completes
- Added evolution flag to completely disable victory checks during evolution

**CURRENT STATUS**: Issue persists - game still resets after evolution

**Tasks**:
- [x] Identify why game restarts during evolution
- [x] Found VictoryManager race condition issue
- [x] Fix victory check validation logic
- [x] Add pause/resume for victory checks during evolution
- [ ] Add comprehensive logging to track exact cause
- [ ] Test evolution without game restarts
- [ ] Investigate if client-side is triggering reload
- [ ] Check for other systems that might reset game state

**Testing Checklist**:
- [ ] Pawn can evolve to splitter without game restart
- [ ] Victory checks don't trigger falsely during evolution
- [ ] Multiple players can evolve simultaneously
- [ ] AI players don't cause false victories
- [ ] Game state remains consistent after evolution

---

### 4.6 Checkmate Victory System Redesign
**Status**: [ ] Not Started
**Priority**: HIGH - Core Game Logic
**Estimated Time**: 3-4 hours
**Description**: Redesign victory system to properly handle checkmate with multiple teams

**REQUIREMENTS**:
- When more than 2 teams exist: Teams are eliminated when checkmated, game continues
- When only 2 teams remain: Next checkmate ends the game and declares winner
- System must track number of active (non-eliminated) teams
- Victory should trigger immediately on checkmate when only 2 teams remain

**PROPOSED IMPLEMENTATION**:
1. **Game Setup Phase**:
   - Create pre-game lobby where players specify team count
   - Set number of human vs AI players
   - Lock player count when game starts
   - No new players can join after game begins

2. **Checkmate Handling**:
   - Track active teams (teams with king still alive)
   - On king capture: Check remaining active teams
   - If > 2 teams remain: Eliminate checkmated team, continue game
   - If = 2 teams remain: Declare capturing team as winner

3. **Development Mode Considerations**:
   - May require multiple browsers for testing multi-team scenarios
   - Consider adding debug commands for team setup

**Tasks**:
- [ ] Design game lobby UI for team setup
- [ ] Implement pre-game player/team configuration
- [ ] Track active teams vs eliminated teams
- [ ] Modify checkmate logic based on team count
- [ ] Update victory conditions for 2-team endgame
- [ ] Add proper victory declaration on final checkmate
- [ ] Test with various team configurations

**Testing Checklist**:
- [ ] 3+ team games eliminate teams on checkmate
- [ ] 2-team games end immediately on checkmate
- [ ] Victory declared correctly for final winner
- [ ] Eliminated teams handled properly
- [ ] Game lobby prevents late joins

---

### 5. Move Timer Logic Fix
**Status**: [ ] Not Started
**Priority**: High
**Estimated Time**: 1-2 hours
**Description**: Timer synchronization issues and movement bugs

**Tasks**:
- [ ] Debug timer synchronization issues
- [ ] Fix timer-related movement bugs
- [ ] Ensure moves only allowed when timer at 0
- [ ] Test timer behavior with multiple players
- [ ] Fix edge cases with timer expiration

**Testing Checklist**:
- [ ] Timer counts down correctly for each player
- [ ] Moves only execute when timer reaches 0
- [ ] Timer synchronizes properly across clients
- [ ] No timer-related movement bugs
- [ ] Timer handles player disconnections

---

### 6. Polar Movement Rules Definition
**Status**: [ ] Not Started
**Priority**: High
**Estimated Time**: 1-2 hours
**Description**: Movement around poles is fundamentally broken

**Tasks**:
- [ ] Define clear movement rules around polar caps
- [ ] Fix king vulnerability at poles
- [ ] Decide on pawn promotion rules (at outer ring?)
- [ ] Implement and test polar movement logic
- [ ] Consider special polar position rules

**Testing Checklist**:
- [ ] Movement around poles works correctly
- [ ] Kings are not unfairly vulnerable at poles
- [ ] Pawn promotion rules are clear and functional
- [ ] Polar movement feels natural and balanced

---

### 7. Battle Position Logic Design Decision
**Status**: [ ] Not Started
**Priority**: Medium - Game Design Issue
**Estimated Time**: 1-2 hours
**Description**: Decide battle position logic - should winner take attacker's position or defender's position?

**CURRENT BEHAVIOR**: Winner always takes the position where the battle occurred (defender's position)
**USER CONCERN**: This causes strategic confusion - defending pieces can "jump" to attacker's position unexpectedly
**DESIGN OPTIONS**:
- Option A: Winner takes contested position (current system)  
- Option B: Attacker disappears if they lose, defender stays in place
- Option C: Winner takes attacker's original position
- Option D: Loser disappears, winner stays in their original position

**Tasks**:
- [ ] Discuss and decide on preferred battle position logic
- [ ] Implement chosen logic in completeBattleResolution function
- [ ] Test with various battle scenarios
- [ ] Update player documentation/tutorial

**Testing Checklist**:
- [ ] Battle position logic works as intended
- [ ] No strategic confusion for players
- [ ] Consistent behavior across all piece types
- [ ] Battle outcomes are clear and predictable

---

## üìù MEDIUM PRIORITY - Missing Features

### 8. Equator Crossing Bonus
**Status**: [x] COMPLETED - Fully Working with Evolution Dialog
**Priority**: Medium
**Estimated Time**: ‚úÖ Complete
**Description**: Pawns should get evolution points for crossing midline

**‚úÖ COMPLETED ON JULY 17TH**: Feature was already implemented but missing evolution dialog:
- Points were awarded correctly (as shown in logs)
- Visual ring animation already worked
- **Fixed**: Added missing `offerEvolutionChoice()` call after equator bonus
- **Result**: Players now get evolution dialog when crossing equator!

**Tasks**:
- [x] Add point award for pawns crossing midline - ‚úÖ Already working
- [x] Create visual feedback for bonus - ‚úÖ Ring animation already exists  
- [x] Test with multiple pieces - ‚úÖ Confirmed working
- [x] Update UI to show bonus points - ‚úÖ Evolution dialog appears
- [x] **NEW**: Trigger evolution dialog after equator bonus - ‚úÖ FIXED

---

## üé® LOW PRIORITY - Polish

### 8. Camera System Improvements
**Status**: [ ] Not Started
**Priority**: Low
**Estimated Time**: 1-2 hours
**Description**: Auto-camera issues and polar orbit restrictions

**Tasks**:
- [ ] Fix auto-camera issues
- [ ] Investigate polar orbit restriction workaround
- [ ] Test camera behavior in different scenarios

---

## SPRINT METRICS
- **Total Tasks**: 8 major features
- **Estimated Time**: 16-24 hours (increased due to evolution system overhaul)
- **Critical Issues**: 3
- **High Priority**: 4 (includes major evolution system redesign)
- **Medium Priority**: 1
- **Low Priority**: 1

## DAILY PROGRESS TRACKING
**Day 1 Target**: Complete Splitter Mechanics Fix ‚úÖ
**Day 2 Target**: Complete Pawn Capture Logic Fix ‚úÖ + Evolution Bug Discovery ‚úÖ
**Day 3 Target**: Complete Evolution Synchronization Bug Fix
**Day 4 Target**: Complete Camera Mode Auto-Switching Bug Fix
**Day 5 Target**: Begin Per-Piece Evolution System Overhaul

## DEFINITION OF DONE
- [ ] All critical issues resolved
- [ ] All high priority features implemented
- [ ] Comprehensive testing completed
- [ ] Game is fully playable without major bugs
- [ ] Code is documented and cleaned up
- [ ] Sprint retrospective completed

## NEXT SPRINT PREPARATION
- [ ] Update all checklists with current status
- [ ] Plan next sprint focusing on polish and optimization
- [ ] Consider user feedback and testing results
- [ ] Prepare for deployment phase

---

**CURRENT STATUS AS OF JULY 18TH @ 12:00 PM**: 
‚úÖ Splitter Movement COMPLETED - Can now both move forward AND split
‚úÖ Manual Evolution Choice System COMPLETED - Dialog working with choice between evolution and banking
‚úÖ Equator Crossing Bonus COMPLETED - Now triggers evolution dialog  
‚úÖ Splitter Split Mechanics WORKING - Pieces successfully split into two!
‚úÖ Evolution Game Restart Bug FIXED - No more game resets or false victories!
üÜï Checkmate Victory System - NEW REQUIREMENT added to sprint

**IN PROGRESS TODAY (JULY 18TH @ 12:00 PM)**:
1. Attempting to fix evolution game restart bug - multiple approaches tried
2. Added evolution pause flag to VictoryManager
3. Enhanced logging to track game state during evolution
4. Issue persists - game still resets after evolving pawn to splitter

**COMPLETED EARLIER (JULY 18TH)**:
1. Fixed splitter movement limitation - removed code blocking regular moves
2. Added move choice dialog for positions with multiple move types
3. Implemented yellow ring highlights for multi-option positions
4. Players can now choose between "Move" or "Split" when both are available

**NEXT ACTION**: Continue debugging evolution restart issue OR implement checkmate victory system

**REMAINING PRIORITIES**: 
- üö® Evolution Game Restart Bug (CRITICAL - Game Breaking)
- üéØ Checkmate Victory System Redesign (NEW - Core Logic)
- üêõ Camera Mode Auto-Switching Bug (Major UX issue)
- üéÆ Battle Position Logic Design Decision 
- üí° Per-Piece Evolution System Redesign (Major overhaul)
- ‚è±Ô∏è Move Timer Logic Fix
- üåç Polar Movement Rules Definition
- üî≤ Battle Feedback System 

---

## JULY 18TH @ 12:30 PM UPDATE

**‚úÖ MAJOR VICTORY: Evolution Game Restart Bug FULLY FIXED!**

After extensive debugging, we identified and fixed ALL issues:
1. **Problem 1**: VictoryManager was declaring false "territory control" victory immediately after evolution
   - **Solution**: Added multiple guards: evolution flag check, 1-minute minimum game time, 3-second delay after evolution
   
2. **Problem 2**: Split highlights weren't clickable (RingGeometry raycasting issue)
   - **Solution**: Changed from flat RingGeometry to 3D TorusGeometry for better raycasting
   
3. **Problem 3**: Victory checks resuming too early after evolution
   - **Solution**: Moved resume call to after evolution-completed event with 3-second delay

**Current Game State**:
- Evolution to splitter works perfectly
- No more game resets or false victories
- Splitters can move forward and split sideways (split highlights now clickable!)
- All core mechanics functional
- Territory calculation properly delayed

**Time Invested**: ~1 hour (11:30 AM - 12:30 PM)

**Next Priority**: Camera Mode Auto-Switching Bug (Phase 1 continues) 